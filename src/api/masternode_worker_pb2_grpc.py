# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import masternode_worker_pb2 as masternode__worker__pb2


class WorkerStub(object):

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.ping = channel.unary_unary(
        '/Worker/ping',
        request_serializer=masternode__worker__pb2.VersionInfo.SerializeToString,
        response_deserializer=masternode__worker__pb2.VersionInfo.FromString,
        )
    self.suggest_peers = channel.unary_unary(
        '/Worker/suggest_peers',
        request_serializer=masternode__worker__pb2.PeersList.SerializeToString,
        response_deserializer=masternode__worker__pb2.PeersList.FromString,
        )
    self.cognite_batch = channel.unary_unary(
        '/Worker/cognite_batch',
        request_serializer=masternode__worker__pb2.CognitionRequest.SerializeToString,
        response_deserializer=masternode__worker__pb2.CognitionResponse.FromString,
        )
    self.batch_status = channel.unary_unary(
        '/Worker/batch_status',
        request_serializer=masternode__worker__pb2.BatchRequest.SerializeToString,
        response_deserializer=masternode__worker__pb2.BatchStatus.FromString,
        )


class WorkerServicer(object):

  def ping(self, request, context):
    """ping accepts masternode version number and returns worker version number
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def suggest_peers(self, request, context):
    """Asks for peer worker suggestions for a given known list of peers
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def cognite_batch(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def batch_status(self, request, context):
    """batch_status accepts task_id returned in CognitionRequest structure
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_WorkerServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'ping': grpc.unary_unary_rpc_method_handler(
          servicer.ping,
          request_deserializer=masternode__worker__pb2.VersionInfo.FromString,
          response_serializer=masternode__worker__pb2.VersionInfo.SerializeToString,
      ),
      'suggest_peers': grpc.unary_unary_rpc_method_handler(
          servicer.suggest_peers,
          request_deserializer=masternode__worker__pb2.PeersList.FromString,
          response_serializer=masternode__worker__pb2.PeersList.SerializeToString,
      ),
      'cognite_batch': grpc.unary_unary_rpc_method_handler(
          servicer.cognite_batch,
          request_deserializer=masternode__worker__pb2.CognitionRequest.FromString,
          response_serializer=masternode__worker__pb2.CognitionResponse.SerializeToString,
      ),
      'batch_status': grpc.unary_unary_rpc_method_handler(
          servicer.batch_status,
          request_deserializer=masternode__worker__pb2.BatchRequest.FromString,
          response_serializer=masternode__worker__pb2.BatchStatus.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'Worker', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class MasternodeStub(object):

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.pong = channel.unary_unary(
        '/Masternode/pong',
        request_serializer=masternode__worker__pb2.VersionInfo.SerializeToString,
        response_deserializer=masternode__worker__pb2.VersionInfo.FromString,
        )
    self.suggest_peers = channel.unary_unary(
        '/Masternode/suggest_peers',
        request_serializer=masternode__worker__pb2.PeersList.SerializeToString,
        response_deserializer=masternode__worker__pb2.PeersList.FromString,
        )
    self.batch_completed = channel.unary_unary(
        '/Masternode/batch_completed',
        request_serializer=masternode__worker__pb2.CognitionResult.SerializeToString,
        response_deserializer=masternode__worker__pb2.CognitionStatus.FromString,
        )


class MasternodeServicer(object):

  def pong(self, request, context):
    """pong accepts masternode version number and returns worker version number
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def suggest_peers(self, request, context):
    """Asks for peer masternode suggestions for a given known list of peers
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def batch_completed(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_MasternodeServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'pong': grpc.unary_unary_rpc_method_handler(
          servicer.pong,
          request_deserializer=masternode__worker__pb2.VersionInfo.FromString,
          response_serializer=masternode__worker__pb2.VersionInfo.SerializeToString,
      ),
      'suggest_peers': grpc.unary_unary_rpc_method_handler(
          servicer.suggest_peers,
          request_deserializer=masternode__worker__pb2.PeersList.FromString,
          response_serializer=masternode__worker__pb2.PeersList.SerializeToString,
      ),
      'batch_completed': grpc.unary_unary_rpc_method_handler(
          servicer.batch_completed,
          request_deserializer=masternode__worker__pb2.CognitionResult.FromString,
          response_serializer=masternode__worker__pb2.CognitionStatus.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'Masternode', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
